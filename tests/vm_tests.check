#include <stdlib.h>

#include <vm.h>

#suite vm_tests

#test test_load_pc
    struct virtual_machine *jolly;
    if(new_vm(&jolly) != VM_OK){
        fail();
    }
    if(create_empty_memory(jolly) != VM_OK){
        fail();
    }
    jolly->memory[PC_HIGH_ADDRESS] = 0x0;
    jolly->memory[PC_MIDDLE_ADDRESS] = 0x42;
    jolly->memory[PC_LOW_ADDRESS] = 0x10;

    load_pc(jolly);
    fail_unless(get_pc_address(jolly) == 0x004210);
    free_vm(jolly);

#test test_set_pc_address
    struct virtual_machine *jolly;
    if(new_vm(&jolly) != VM_OK){
        fail();
    }
    if(create_empty_memory(jolly) != VM_OK){
        fail();
    }

    set_pc_address(jolly, 0x001042);
    fail_unless(get_pc_address(jolly) == 0x001042);
    free_vm(jolly);

#test test_serialize_pc
    struct virtual_machine *jolly;
    if(new_vm(&jolly) != VM_OK){
        fail();
    }
    if(create_empty_memory(jolly) != VM_OK){
        fail();
    }

    fail_unless(extract_pc(jolly) == 0x000000);

    set_pc_address(jolly, 0x001042);
    serialize_pc(jolly);

    fail_unless(extract_pc(jolly) == 0x001042);
    free_vm(jolly);

#test test_new_vm_status
    struct virtual_machine *jolly;
    if(new_vm(&jolly) != VM_OK){
        fail();
    }

    fail_unless(jolly->status == VIRTUAL_MACHINE_RUN);
    free_vm(jolly);
